<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Code Dominates]]></title>
  <link href="http://k.swd.cc/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://k.swd.cc/"/>
  <updated>2013-02-16T22:24:49+00:00</updated>
  <id>http://k.swd.cc/</id>
  <author>
    <name><![CDATA[Kei Sawada]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mock object in PHPUnit ROCKS]]></title>
    <link href="http://k.swd.cc/blog/2012/11/03/mock-object-in-phpunit-rocks/"/>
    <updated>2012-11-03T22:31:00+00:00</updated>
    <id>http://k.swd.cc/blog/2012/11/03/mock-object-in-phpunit-rocks</id>
    <content type="html"><![CDATA[<p>Suppose you fake it like this:</p>

<pre><code>class TwitterClient
{
    public function tweet($message)
    {
        return true;
    }
}

$foo = new TwitterClient();
$foo-&gt;tweet('Spot ko!'); // returns true
</code></pre>

<p>With PHPUnit, you're able to use Mock Object instead. Now your code looks like:</p>

<pre><code>class ClientContainerTest extends PHPUnit_Framework_TestCase
{
    public function test_MockPractice()
    {
        $foo = $this-&gt;getMock('TwitterClient', array('tweet'));
        $foo-&gt;expects($this-&gt;any())
            -&gt;method('tweet')
            -&gt;will($this-&gt;returnValue(true));

        $foo-&gt;tweet('Spot ko!'); // returns true
    }
}
</code></pre>

<p>It's quite easy to understand how method(), will() and returnValue() work. How about expects()? It restricts the number of invocation count. Set any() then no restriction will be set. If you would like some method to be invoked only once, then set once() for example.</p>

<p>This is how you create Mock Object in PHPUnit, however it's still hard to find out why Mock Object is useful. Let's take another example, which accesses with database server via PDO.</p>

<p>Supporse you would like to run your test but you can't run database server. I'm showing you a bad example first:</p>

<pre><code>class PDO
{
    public function __construct($dsn)
    {
        return true;
    }

    public function query($sql)
    {
        return new PDOStatement();
    }
}

$pdo = new PDO('sqlite:memory'); // Fatal Error
$pdo-&gt;query('SELECT * FROM users;');
</code></pre>

<p>Run the code above, then you will see error message on your display which says "Cannot redeclare class PDO". As PDO is embedded class and declared already, you cannot redeclare PDO. To use sqlite:memory which enable you to create database on memory was pretty neat though.</p>

<p>This is the case where you should remember Mock Object.</p>

<pre><code>class PDOContainerTest extends PHPUnit_Framework_TestCase
{
    public function test_StubQuery()
    {
        $foo = $this-&gt;getMock('PDO', array('query'), array('sqlite:memory'));
        $foo-&gt;expects($this-&gt;any())
            -&gt;method('query')
            -&gt;will($this-&gt;returnValue(new PDOStatement()));

        $foo-&gt;query('SELECT * FROM users;') // instantiated PDOStatement class will be returned
        $foo-&gt;getAvailableDrivers(); // take note that methods originally declared in PDO class is available too
    }
}
</code></pre>

<p>With this test code, $foo will have stubbed query() method as well as methods originally declared in PDO class such as getAvailableDrivers() in the example above. This is how Partial Mock is made.</p>

<p>If you only need to prepare fixture for DB for example, then you have other even better choises like <a href="http://www.phpunit.de/manual/3.7/en/database.html">Database Extension of PHPUnit</a> or <a href="http://phactory.org/">Phactory</a> etc. But how about your legacy code is doing for example:</p>

<ul>
<li>Calling some webservice method(API) and depending on the behavior of the external module</li>
<li>Depending on the volatile data which memcached keeps at the production environment</li>
</ul>


<p>would you still like to search the web and run out of your limited time?</p>

<p>To learn mock framework which doesn't focus on solving problem in specific domain is pretty useful. Whatever issues you are facing with, mock framework gives you higher testability of the desgin you are making, which means refactoring becomes much easier for you.</p>

<p>Go on the next chapter and let's take a look at the various mock frameworks written in PHP.</p>

<h1>Mock Frameworks Written in PHP</h1>

<p>Here is the result of my quick investigation on Oct 2012.</p>

<table>
  <tr>
    <th>Framework</th>
    <th>Required PHP Environment</th>
    <th>Website</th>
    <th>Note</th>
  </tr>
  <tr>
    <td>PHPUnit</td>
    <td>PHPUnit3.7: require PHP 5.3.3 and up(PHP 5.4.7+ is recommended)<br>PHPUnit3.6: require even with PHP 5.2</td>
    <td><a href='https://github.com/sebastianbergmann/phpunit'>Website</a></td>
    <td><a href='http://www.phpunit.de/manual/3.7/en/test-doubles.html'>Sample Code</a></td>
  </tr>
  <tr>
    <td>Mockery</td>
    <td>PHP 5.3.2 and up</td>
    <td><a href='https://github.com/padraic/mockery'>Website</a></td>
    <td><a href='https://github.com/padraic/mockery/blob/master/tests/Mockery/ExpectationTest.php'>Sample Code</a></td>
  </tr>
  <tr>
    <td>Phake</td>
    <td>PHP 5.2.4 and up</td>
    <td><a href='https://github.com/mlively/Phake/'>Website</a></td>
    <td><a href='https://github.com/mlively/Phake/blob/master/tests/PhakeTest.php'>Sample Code</a></td>
  </tr>
  <tr>
    <td>SimpleTest</td>
    <td>SimpleTest1.1: require PHP 5.0.3 and up<br>Older version of Simpletest work with PHP 4</td>
    <td><a href='http://www.simpletest.org/'>Website</a></td>
    <td><a href='http://simpletest.org/en/mock_objects_documentation.html'>Sample Code</a></td>
  </tr>
  <tr>
    <td>Phockito</td>
    <td>(Not Yet Confirmed)</td>
    <td><a href='https://github.com/hafriedlander/phockito'>Website</a></td>
    <td>N/A</td>
  </tr>
  <tr>
    <td>yayMock</td>
    <td>(Not Yet Confirmed)</td>
    <td><a href='http://code.google.com/p/yaymock/'>Website</a></td>
    <td>N/A</td>
  </tr>
</table>


<p>From my quick skim, PHPUnit and Mockery look useful enough to me. And then, What is the pros/cons of these two mock frameworks and finally how to pick one?</p>

<p>The table below shows what feature is simple comparison of mock framework features.</p>

<table>
  <tr>
    <th>Functionality</th>
    <th>PHPUnit 3.7</th>
    <th>Mockery 0.7.2</th>
    <th>Note</th>
  </tr>
  <tr>
    <td>Invocation Count Constraint</td>
    <td>OK</td>
    <td>Love It</td>
    <td>Mockery is better. atMost() and atLeast() methods are available.</td>
  </tr>
  <tr>
    <td>Partial Mocking</td>
    <td>OK</td>
    <td>Very Good</td>
    <td><a href='http://blog.sznapka.pl/why-mockery-is-better-than-phpunit-mock-builder-and-how-to-integrate-it-with-symfony2/'>Constructer can be much simpler</a> in Mockery.</td>
  </tr>
  <tr>
    <td>Argument Matchers</td>
    <td>OK</td>
    <td>OK</td>
    <td><a href='http://www.phpunit.de/manual/3.6/en/writing-tests-for-phpunit.html'>All mathers at table 4.3</a> are available in PHPUnit by with() call. About Mockery, refer <a href='https://github.com/padraic/mockery#argument-validation'>README.md</a></td>
  </tr>
  <tr>
    <td>Cascading Mocks|center</td>
    <td>OK</td>
    <td>Excellent</td>
    <td>Just a bit hustle with PHPUnit <a href='http://artur.ejsmont.org/blog/content/a-great-way-to-mock-chained-calls-in-phpunit'>but doable</a> or (<a href='http://stackoverflow.com/questions/4232763/mock-objects-which-support-chaining-methods'>like this</a>). With Mockery, here is example <a href='https://github.com/padraic/mockery#mocking-demeter-chains-and-fluent-interfaces'>in README.md</a></td>
  </tr>
  <tr>
    <td>Ordered Expectations</td>
    <td>Can't</td>
    <td>OK</td>
    <td>With Mockery it's possible but not comfortable</td>
  </tr>
</table>


<p>As you can see the table, Mockery 0.7.2 is definitely better in terms of functionality. Actually Mockery is better at other aspects as well:</p>

<ul>
<li><a href="https://github.com/padraic/mockery#mocking-public-properties">Mocking Public Properties</a></li>
<li><a href="https://github.com/padraic/mockery#preserving-pass-by-reference-method-parameter-behaviour">Preserving Pass-By-Reference Method Parameter Behaviour</a></li>
<li>(Since Mockery supports only PHP5.3 and up so this means closure is available, )<a href="https://github.com/padraic/mockery#mock-object-recording">Mock Object Recording</a></li>
</ul>


<p>Then what about PHPUnit3.7? In my opinion, it's still useful if you are just newbie on using mock framework.</p>

<p>Lately PHPUnit is broadly used in PHP development and therefore, once you learn to write mock object then for sure, you will be able to apply your experience to the design issue your team will face.</p>

<h2>Reference</h2>

<ul>
<li>Difference between the Mock Object in PHPUnit and Mockery / <a href="http://jontai.me/blog/2012/04/flexible-mock-objects-with-mockery/">Why Mockery?</a></li>
<li>Code exmamples of Mockery, Phake, Phockito and PHPUnit / <a href="https://gist.github.com/1753804">gist: 1753804 / Example temperature webservice</a></li>
</ul>


<h1>Code To Learn</h1>

<p><img src="/images/blog/20121104-goos.jpg" alt="Goos Book" /></p>

<p>You must know about the book "Growing Object-Oriented Software Guided by Tests" a.k.a #goos by Steve Freeman and Nat Pryce. And you also know that there was a book Steve and Nat contributed about same topic before goos?</p>

<p><a href="http://ep.khbo.be/Projects/TDD4ES/Literature/Mock-Roles-not-Objects">"Mock Roles, not Objects"</a> is it. The pdf just consists of 11 pages, however the concept and the idea they explained in the book is worth reading. I promise that you will not waste your time to read this book deliberately.</p>

<h2>Various Sample Codes Are Available</h2>

<p>I wrote already in both PHPUnit nad Mockery and <a href="https://github.com/remore/mock-roles-practice">they are available at my github account</a>. Kindly feel free to send me pull request if you find something wrong about my code. Other than that, <a href="https://github.com/iakio/mrno-php">@iakio seems wrote in PHP as well</a>.</p>

<p>Or if you are Java developer, then <a href="https://github.com/digitalsoul0124/mock-roles-sample">the example by @digitalsoul0124</a> may help. There are tons of example in the world wide web so that you can find your favorite example with your favorite programming language. ( Let me add that in Java <a href="http://svn.codehaus.org/jmock/trunk/jmock1/examples/timed-cache/src/org/jmock/examples/timedcache/TimedCache.java">the example in jmock1</a> and <a href="http://svn.codehaus.org/jmock/trunk/jmock1/examples/timed-cache/src/test/jmock/examples/timedcache/TimedCacheTest.java">the test</a>, or there is also <a href="http://svn.codehaus.org/jmock/trunk/jmock2/example/org/jmock/example/timedcache/">example in jmock2</a>)</p>

<h2>Tips On Coding "Mock Roles, not Objects"</h2>

<ul>
<li><p>Better to know basics about OOP and design patterns. Text implies useful and practical idea of OOP such as "object oriented style based on composition rather than inheritance" or "Programming by Composition" but if you don't know OOP, these words will not make sense at all.</p></li>
<li><p>To set up PHPUnit environment, <a href="http://qiita.com/items/81085381c4281e498cde">tips by suin</a> works to me.(Sorry it's written only in Japanese, but you can guess by reading just commands and source codes;) ) If you would like to use under 5.2 where you can't use composer unfortunately, you need to use PEAR instead.
-- Take note that <a href="http://sebastian-bergmann.de/archives/924-Using-PHPUnit-from-a-PHP-Archive-PHAR.html">phar(PHP Archive) becomes available</a> from PHPUnit3.7.5</p></li>
<li><p>It would be small point but let me tell you as It was a bit surprising to me. In PHPUnit, once you call getMock() then it increments number of assertions of final test run result even without calling any expects to the instantiated mock object. Guessing verify() equivalent function would be called at the end of test running. This unexpected things robbed me from a few hours to get understand well.</p></li>
<li><p>You CANNOT do method chaining with using getMock() instance directly(I found <a href="http://stackoverflow.com/questions/3221885/phpunit-mock-objects-and-method-type-hinting">someone at stackoverflow did completely same as me</a>). For example, this code will cause error:</p>

<pre><code>      $foo = $this-&gt;getMock('PDO', array('query'))
          -&gt;expects($this-&gt;any())
          -&gt;method('query')
          -&gt;will($this-&gt;returnValue(array('id'=&gt;7, 'name'=&gt;'Ichiro Suzuki')));
</code></pre></li>
<li><p>HashMap doesn't make sense to most of PHP programmers. In PHP, let's say it's just a Array.(* I know strictly speaking Hashmap in Java is different from Array in PHP AT ALL but here just let me please explain just for simplification. [[Go stackoverflow>http://stackoverflow.com/questions/6841379/is-there-java-hashmap-equivalent-in-php]] if you would like to keep talking about this)</p></li>
<li><p>In the original pdf document, you'll frequently see verify() method are called, but in PHPUnit, verify() equivalent function will be called automatically at the end of test running, so you do not need to take care about verify() calling in case you would use PHP. ( use mockery_verify in Mockery and verify() in Phake instead)</p></li>
<li><p>Inner class is used at some code snippet but in PHP inner class is not supported. Just ignore and take those class out of class is enough so far.</p></li>
</ul>


<p>That's all for today. Mock object in PHPUnit ROCKS.</p>
]]></content>
  </entry>
  
</feed>
